- block:
  - name: Postfix
    include_role: name=postfix-smarthost
  when: "postfix_relayhost is defined"

- name: MySQL
  include_role: name=mysql

- name: Apache
  include_role: name=apache

- name: Vhost
  include_role: name=vhost
  vars:
    use_perl: true

- name: Set otrs folder permissions
  file: path={{ otrs_install_path }} owner={{ otrs_user }} group={{ otrs_group }} mode=0755 state=directory

- name: APT | Install dependendies
  apt: name={{ item }}
  with_items:
    - libarchive-zip-perl
    - libcrypt-eksblowfish-perl
    - libcrypt-ssleay-perl
    - libdbd-pg-perl
    - libencode-hanextra-perl
    - libio-socket-ssl-perl
    - libjson-xs-perl
    - libmail-imapclient-perl
    - libio-socket-ssl-perl
    - libnet-dns-perl
    - libnet-ldap-perl
    - libtemplate-perl
    - libtemplate-perl
    - libtext-csv-xs-perl
    - libxml-libxml-perl
    - libxml-libxslt-perl
    - libxml-parser-perl
    - libyaml-libyaml-perl
    - libdbd-mysql-perl
    - python-sqlalchemy
    - python-mysqldb
    - libdatetime-perl
  when: ansible_pkg_mgr == "apt"

- name: Fact | createdb
  set_fact: "{{item.key}}={{item.value}}"
  with_items:
    - key: "createdb_dbs"
      value: "mysql"
    - key: "createdb_config"
      value: "{{ vhost_directory }}/.my.cnf"
    - key: "createdb_user"
      value: "{{ otrs_database_user }}"
    - key: "createdb_host"
      value: "localhost"
    - key: "createdb_database"
      value: "{{ otrs_database }}"

- name: Database
  include_role: name=createdb

- name: Check if otrs is already installed
  stat: path={{ otrs_install_path }}/Kernel
  register: otrs_kernel_stat

- name: check if otrs installation archive exists
  local_action: stat path={{otrs_tar_file}}
  register: otrs_tar_file_stat

- fail: msg="otrs isn't installed and installation archive not found"
  when: not otrs_kernel_stat.stat.exists and not otrs_tar_file_stat.stat.exists

- name: Extract OTRS
  unarchive: src={{ otrs_tar_file }} dest={{ otrs_install_path }} owner={{ otrs_user }} group={{ otrs_group }} extra_opts="--strip-components=1"
  when: not otrs_kernel_stat.stat.exists

- name: Check if apache config exists
  stat: path={{ apache_sites_include }}/{{ vhost_domain }}_otrs.conf
  register: apache_otrs_conf

- name: Copy apache configuration
  synchronize: mode=pull src={{ otrs_install_path }}/scripts/apache2-httpd.include.conf dest={{ apache_sites_include }}/{{ vhost_domain }}_otrs.conf
  delegate_to: "{{inventory_hostname}}"
  when: not apache_otrs_conf.stat.exists

- name: Delete broken config from file
  lineinfile: dest={{ apache_sites_include }}/{{ vhost_domain }}_otrs.conf state=absent line="MaxRequestsPerChild 4000"

- name: OTRS redirect to index.pl
  copy: src=redirect_otrs.conf dest={{ apache_sites_include }}/{{ vhost_domain }}_redirect.conf

- name: Check if otrs configuration already exists
  stat: path={{ otrs_install_path }}/Kernel/Config.pm
  register: otrs_config_stat

- name: Create configuration
  copy:
    remote_src: true
    src: "{{ otrs_install_path }}/Kernel/Config.pm.dist"
    dest: "{{ otrs_install_path }}/Kernel/Config.pm"
    owner: "{{ otrs_user }}"
    group: "{{ otrs_group }}"
    mode: "0640"
  when: not otrs_config_stat.stat.exists

- name: Set database configuration
  lineinfile:
    dest: "{{ otrs_install_path }}/Kernel/Config.pm"
    backrefs: yes
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: "^(\\s*)\\$Self\\-\\>\\{DatabaseHost\\}\\s*=.*;$"
      line: "\\1$Self->{DatabaseHost} = 'localhost';"
    - regexp: "^(\\s*)\\$Self\\-\\>\\{Database\\}\\s*=.*;$"
      line: "\\1$Self->{Database} = '{{ otrs_database }}';"
    - regexp: "^(\\s*)\\$Self\\-\\>\\{DatabaseUser\\}\\s*=.*;$"
      line: "\\1$Self->{DatabaseUser} = '{{ otrs_database_user }}';"
    - regexp: "^(\\s*)\\$Self\\-\\>\\{DatabasePw\\}\\s*=.*;$"
      line: "\\1$Self->{DatabasePw} = '{{ createdb_password }}';"

- name: Check if db exists
  sqledit:
    url: "mysql+mysqldb://localhost/INFORMATION_SCHEMA?read_default_file={{ vhost_directory }}/.my.cnf"
    table: TABLES
    state: select
    keys:
      - TABLE_SCHEMA
    columns:
      - name: TABLE_SCHEMA
        type: String
        value: "{{ otrs_database }}"
  register: otrsdb_check

- block:
    - name: Import schema
      mysql_db:
        name: "{{ otrs_database }}"
        state: import
        target: "{{ otrs_install_path }}/scripts/database/otrs-schema.mysql.sql"
    - name: Import initial data
      mysql_db:
        name: "{{ otrs_database }}"
        state: import
        target: "{{ otrs_install_path }}/scripts/database/otrs-initial_insert.mysql.sql"
    - name: Import post schema
      mysql_db:
        name: "{{ otrs_database }}"
        state: import
        target: "{{ otrs_install_path }}/scripts/database/otrs-schema-post.mysql.sql"
  when: otrsdb_check.rows|length == 0

- name: Check for root@localhost
  sqledit:
    url: "mysql+mysqldb://localhost/{{ otrs_database }}?read_default_file={{ vhost_directory }}/.my.cnf"
    table: users
    state: select
    keys:
      - login
      - pw
    columns:
      - name: login
        type: String
        value: "root@localhost"
      - name: pw
        type: String
        value: "roK20XGbWEsSM"
  register: otrs_check_user

- name: Check if sysconfig_default table has been created
  sqledit:
    url: "mysql+mysqldb://localhost/{{ otrs_database }}?read_default_file={{ vhost_directory }}/.my.cnf"
    table: sysconfig_default
    state: select
    keys:
      - name
    columns:
      - name: name
        type: String
        value: "SystemID"
  register: systemd_id_default

- name: Build sysconfig_default
  command: /opt/otrs/bin/otrs.Console.pl Maint::Config::Rebuild
  become: yes
  become_user: otrs
  when: systemd_id_default.rows|length == 0

- name: Check for SystemID
  sqledit:
    url: "mysql+mysqldb://localhost/{{ otrs_database }}?read_default_file={{ vhost_directory }}/.my.cnf"
    table: sysconfig_modified
    state: select
    keys:
      - name
    columns:
      - name: name
        type: String
        value: "SystemID"
      - name: id
        type: Integer
  register: systemd_id

- name: Set sysconfig proxy
  include_tasks: sysconfig.yml
  with_items:
    - name: "Package::Proxy"
      value: "{{ otrs_proxy }}"
    - name: "WebUserAgent::Proxy"
      value: "{{ otrs_proxy }}"
  when: otrs_proxy is defined and systemd_id.rows|length == 0
  notify: rebuild config

- name: Set sysconfig
  include_tasks: sysconfig.yml
  with_items:
    - name: "CloudServices::Disabled"
      value: 1
    - name: "CheckMXRecord"
      value: 0
    - name: "DefaultLanguage"
      value: "de"
    - name: "FQDN"
      value: "{{ ansible_fqdn }}"
    - name: "SecureMode"
      value: 1
    - name: "OTRSTimeZone"
      value: "{{ otrs_timezone }}"
    - name: "UserDefaultTimeZone"
      value: "{{ otrs_timezone }}"
    - name: "Frontend::AvatarEngine"
      value: "None"
    - name: "Secure::DisableBanner"
      value: 1
    - name: "SystemID"
      value: "{{ '%02d' % 100|random(seed=ansible_fqdn) }}"
  when: systemd_id.rows|length == 0

- name: Check if otrs_login_password is set
  fail:
    msg: "Please specify otrs_login_password to setup first user"
  when: otrs_check_user.rows|length == 1 and (not otrs_login_password is defined)

- name: Set password for root@localhost
  sqledit:
    url: "mysql+mysqldb://localhost/{{ otrs_database }}?read_default_file={{ vhost_directory }}/.my.cnf"
    table: users
    state: present
    keys:
      - login
    columns:
      - name: login
        type: String
        value: "root@localhost"
      - name: pw
        type: String
        value: "{{ otrs_login_password|hash('sha256') }}"
  when: otrs_check_user.rows|length == 1

- name: SysV | OTRS Daemon
  template: src=sysvinit.j2 dest=/etc/init.d/otrs owner=root group=root mode=0755
  when: ansible_service_mgr != "systemd"

- name: SystemD | OTRS Daemon
  template: src=systemd.j2 dest=/etc/systemd/system/otrs.service owner=root group=root mode=0644
  when: ansible_service_mgr == "systemd"

- name: SysV | enable otrs daemon
  service: name=otrs enabled=yes
  when: ansible_service_mgr != "systemd"

- name: SystemD | Remove old init scripts
  file: path=/etc/init.d/otrs state=absent
  when: ansible_service_mgr == "systemd"

- name: SystemD | enable otrs daemon
  systemd: name=otrs daemon_reload=yes enabled=yes
  when: ansible_service_mgr == "systemd"

- name: Enable bash completion
  lineinfile:
    line: ". {{ otrs_install_path }}/.bash_completion"
    dest: "{{ otrs_install_path }}/.bashrc"

- name: Check if .procmailrc exists
  stat: path={{ otrs_install_path }}/.procmailrc
  register: otrs_procmailrc_stat

- name: Configure procmail
  copy: src={{ otrs_install_path }}/.procmailrc.dist dest={{ otrs_install_path }}/.procmailrc remote_src=True owner=root group=root mode=0644
  when: not otrs_procmailrc_stat.stat.exists

- name: Set permissions
  tree_permission:
    root_path: "{{ otrs_install_path }}"
    regexp:
      - paths:
          - ".*"
        file_mode: "0664"
        dir_mode: "2775"
        file_owner: "{{ otrs_user }}"
        file_group: "{{ otrs_group }}"
        dir_owner: "{{ otrs_user }}"
        dir_group: "{{ otrs_group }}"
      - paths:
          - "/"
        dir_mode: "0755"
        dir_owner: "{{ otrs_user }}"
        dir_group: "{{ otrs_group }}"
      - paths:
          - "/.*\\.(pl|psgi|sh)"
          - "/scripts/suse-rcotrs"
        file_mode: "0770"
        file_owner: "{{ otrs_user }}"
        file_group: "{{ otrs_group }}"
        do_dirs: false
      - paths:
          - "/.bashrc"
          - "/.bash_history"
          - "/.viminfo"
        file_mode: "0640"
        file_owner: "{{ otrs_user }}"
        file_group: "{{ otrs_group }}"
        do_dirs: false
      - paths:
          - "/.*\\.(git|tidyall|tx|settings|ssh|gpg|gnupg)"
      - paths:
          - "/.procmailrc"
        file_mode: "0644"
        file_owner: "root"
        file_group: "root"
      - paths:
          - /var/log/.*
          - /var/tmp/.*
        file_mode: "0660"
        file_owner: "{{ otrs_user }}"
        file_group: "{{ otrs_group }}"
        dir_mode: "2770"
        dir_owner: "{{ otrs_user }}"
        dir_group: "{{ otrs_group }}"

- name: rsyslog
  copy: src=rsyslog_otrs.conf dest=/etc/rsyslog.d/otrs.conf owner=root group=root mode=0644
  notify: restart rsyslog

- name: start otrs
  service:
   name: otrs
   state: started